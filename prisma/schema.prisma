// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      =  "mysql://ujzbxf3wphrrwds0:8tlmiAt9q97DtFdFatXw@bx4uwg2oxeibwaj7pak8-mysql.services.clever-cloud.com:3306/bx4uwg2oxeibwaj7pak8"
}

model User {
  id                    Int                     @id @default(autoincrement())
  email                 String                  @unique
  password              String
  mobileNumber          String?                 @unique
  businessName          String
  name                  String
  gstNumber             String?
  addresses             Address[]
  attachments           Attachment[]
  roleId                Int
  role                  Role?                   @relation(fields: [roleId], references: [id])
  acceptTerms           Boolean
  isActive              Boolean                 @default(false) // for admin approval
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  categories            Category[]
  products              Product[]
  orderHistory          OrderHistory[]
  order                 Order[]
  orderItems            OrderItem[]
}

model Address {
  id                   Int            @id @default(autoincrement())
  userId               Int?
  country              String
  state                String
  city                 String
  pinCode              String
  address              String?
  user                 User ?         @relation(fields: [userId], references: [id])
  customerAddress      OrderCustomer?
  isMeasureMentAddress OrderItem?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
}

model Role {
  id            Int                        @id @default(autoincrement())
  name          String                     @unique
  capabilityIds RoleAndCapabilityMapping[]
  orderStatusIds  RoleAndOrderStatusMapping[]
  users         User[]
  createdAt     DateTime                   @default(now())
  updatedAt     DateTime                   @updatedAt
}

model Capability {
  id                       Int                        @id @default(autoincrement())
  name                     String                     @unique
  roleAndCapabilityMapping RoleAndCapabilityMapping[]
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
}

model RoleAndCapabilityMapping {
  capabilityId Int
  roleId       Int
  capability   Capability @relation(fields: [capabilityId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@id([capabilityId, roleId])   
}

model RoleAndOrderStatusMapping {
  orderStatusId Int
  roleId       Int
  orderStatus  OrderStatus @relation(fields: [orderStatusId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  @@id([orderStatusId, roleId])
}

model GeoLocation {
  id      Int    @id @default(autoincrement())
  state   String
  city    String
  pincode String
}


model Attachment {
  id             Int                     @id @default(autoincrement())
  filePath       String
  fileName       String
  attachmentType String
  userId         Int
  associations   AttachmentToAssociation[]
  user           User                    @relation(fields: [userId], references: [id])
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt

  @@map("attachments")
}

model AttachmentAssociation {
  id           Int                     @id @default(autoincrement())
  relationId   Int
  relationType String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  attachments  AttachmentToAssociation[]
}

model AttachmentToAssociation {
  attachmentId             Int
  attachmentAssociationId  Int
  attachment               Attachment            @relation(fields: [attachmentId], references: [id])
  attachmentAssociation    AttachmentAssociation @relation(fields: [attachmentAssociationId], references: [id])
  @@id([attachmentId, attachmentAssociationId])
}

model Category {
  id                     Int                     @id @default(autoincrement())
  userId                 Int
  parentId               Int?
  parent                 Category?               @relation("CategoryToSubcategories", fields: [parentId], references: [id])
  subCategories          Category[]              @relation("CategoryToSubcategories")
  name                   String
  description            String?                 @db.Text
  product                Product[]
   user                   User                    @relation(fields: [userId], references: [id])
  type                   CategoryType
  includeSubCategory     Boolean                 @default(false)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt

}

model Product {
  id                    Int                     @id @default(autoincrement())
  categoryId            Int
  workflowId            Int
  gst                   Int
  discount              Int?
  workflow              WorkFlow                @relation(fields: [workflowId], references: [id])
  name                  String
  description           String                  @db.Text
  quantity              Json?
  category              Category?               @relation(fields: [categoryId], references: [id])
   price                 String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  User                  User                    @relation(fields: [userId], references: [id])
  userId                Int
  isFitmentRequired     Boolean?                @default(false)
  isMeasurementRequired Boolean?                @default(false)
  attributes            ProductAttribute[]
  orderItems            OrderItem[]
  exclude               Boolean                 @default(false)

}

model ProductAttribute {
  id              Int           @id @default(autoincrement())
  productId       Int
  attributeId     Int
  product         Product       @relation(fields: [productId], references: [id])
  attribute       Attribute     @relation(fields: [attributeId], references: [id])
  type            AttributeType
  options         Json?
  price           String        @default("")
}

enum AttributeType {
  text
  dropDown
}

model Attribute {
  id                 Int                @id @default(autoincrement())
  name               String?            @unique
  showToUser         Boolean            @default(true)
  productAttribute   ProductAttribute[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model OrderStatus {
  id             Int           @id @default(autoincrement())
  status         String
  description    String?        @db.Text
  showToUser     Boolean
  dependOn       Int?
  orderStatus    OrderStatus?  @relation("orderStatusTosubOrderStatus", fields: [dependOn], references: [id])
  subOrderStatus OrderStatus[] @relation("orderStatusTosubOrderStatus")
  roleAndOrderStatusMapping RoleAndOrderStatusMapping[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model OrderCustomer {
  id                Int       @id @default(autoincrement())
  name              String
  email             String?
  additionalDetails String?
  mobileNumber      String
  address   Address  @relation(fields: [addressId], references: [id])
  addressId         Int      @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  orderId           Int @unique
  order             Order    @relation(fields: [orderId], references: [id])
}

model OrderItem {
  id                     Int      @id @default(autoincrement())
  name                   String
  price                  String
  quantity               Int
  productId              Int
  workflowId             Int
  isMeasurementAddress   Address? @relation(fields: [isMeasurementAddressId], references: [id])
  isMeasurementAddressId Int?   @unique
  additionalDetails      String?  @db.Text
  description            String   @db.Text
  product                Product  @relation(fields: [productId], references: [id])
  attributes             Json?
  ownerName              String
  gst                    Int
  measurement            String?
  discount               Int?
  discountType           String?
  orderId                Int
  order                  Order    @relation(fields: [orderId], references: [id])
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  workflow               WorkFlow @relation(fields: [workflowId], references: [id])
  orderItemStatus        String 
  deliveryDate           DateTime?
  attachmentType         String?
  assignedTo             User?    @relation(fields: [assignedToId], references: [id])
  assignedToId           Int?
  expectedBy             DateTime?
}

model Order {
  id               Int            @id @default(autoincrement())
  advancePayment   Decimal?
  remainingPayment Decimal
  totalPayment     Decimal
  ownerName        String
  paymentMode      String
  invoiceNumber    Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  userId           Int
  userDetails      User   @relation(fields: [userId], references: [id])
  customerDetails  OrderCustomer?
  orderItems       OrderItem[]
}

model OrderHistory {
  id          Int      @id @default(autoincrement())
  updatedById Int
  updatedBy    User     @relation(fields: [updatedById], references: [id])
  timestamp   DateTime @default(now())
  orderItemId Int
  statusId    Int  
}

model WorkFlow {
  id        Int         @id @default(autoincrement())
  name      String
  sequence  Json?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  product   Product[]
  orderItem OrderItem[]
}

enum CategoryType {
  service
  physical
}


